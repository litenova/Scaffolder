using System;
using System.Collections.Generic;
using LiteBus.Commands.Abstractions;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.{{ UseCase.Name }};

/// <summary>
/// Represents a command to {{ UseCase.Name.Humanize }} a {{ AggregateRoot.Name }}.
/// </summary>
public sealed class {{ UseCase.Name }}{{ AggregateRoot.Name }}Command : ICommand
{
    /// <summary>
    /// Gets or initializes the unique identifier of the {{ AggregateRoot.Name }}.
    /// </summary>
    public required {{ AggregateRoot.IdType }} Id { get; init; }

    {{~ for parameter in UseCase.Parameters ~}}
    /// <summary>
    /// Gets or initializes {{ parameter.Name.Humanize }}.
    /// </summary>
    public {{ if parameter.IsCollection }}IEnumerable<{{ if parameter.IsElementTypeComplex }}{{ parameter.ElementType }}CommandModel{{ else }}{{ parameter.ElementType }}{{ end }}>{{ else if parameter.IsComplex }}{{ parameter.Type }}CommandModel{{ else }}{{ parameter.Type }}{{ end }}{{ if !parameter.IsRequired }}{{ end }} {{ parameter.Name.PascalCase }} { get; init; }{{ if parameter.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ for parameter in UseCase.Parameters ~}}
{{~ if parameter.IsComplex ~}}
/// <summary>
/// Represents the {{ parameter.Type }} model for the {{ UseCase.Name.Humanize }} command on {{ AggregateRoot.Name }}.
/// </summary>
public sealed class {{ parameter.Type }}CommandModel
{
    {{~ for nestedParameter in parameter.NestedMembers ~}}
    /// <summary>
    /// Gets or initializes {{ nestedParameter.Name.Humanize }}.
    /// </summary>
    public {{ if nestedParameter.IsCollection }}IEnumerable<{{ if nestedParameter.IsElementTypeComplex }}{{ nestedParameter.ElementType }}CommandModel{{ else }}{{ nestedParameter.ElementType }}{{ end }}>{{ else if nestedParameter.IsComplex }}{{ nestedParameter.Type }}CommandModel{{ else }}{{ nestedParameter.Type }}{{ end }}{{ if !nestedParameter.IsRequired }}{{ end }} {{ nestedParameter.Name.PascalCase }} { get; init; }{{ if nestedParameter.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
/// <summary>
/// Represents the {{ parameter.ElementType }} model for the {{ UseCase.Name.Humanize }} command on {{ AggregateRoot.Name }}.
/// </summary>
public sealed class {{ parameter.ElementType }}CommandModel
{
    {{~ for nestedParameter in parameter.NestedMembers ~}}
    /// <summary>
    /// Gets or initializes {{ nestedParameter.Name.Humanize }}.
    /// </summary>
    public {{ if nestedParameter.IsCollection }}IEnumerable<{{ if nestedParameter.IsElementTypeComplex }}{{ nestedParameter.ElementType }}CommandModel{{ else }}{{ nestedParameter.ElementType }}{{ end }}>{{ else if nestedParameter.IsComplex }}{{ nestedParameter.Type }}CommandModel{{ else }}{{ nestedParameter.Type }}{{ end }}{{ if !nestedParameter.IsRequired }}{{ end }} {{ nestedParameter.Name.PascalCase }} { get; init; }{{ if nestedParameter.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ end ~}}