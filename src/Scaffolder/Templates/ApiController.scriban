using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Swashbuckle.AspNetCore.Annotations;
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }};
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Create;
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.GetById;
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.GetAll;
{{~ for useCase in UseCases ~}}
{{~ if useCase.Name != "Create" && useCase.Name != "GetById" && useCase.Name != "GetAll" ~}}
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.{{ useCase.Name }};
{{~ end ~}}
{{~ end ~}}
using {{ WebApiProject.Namespace }}.Models.{{ AggregateRoot.Name.Plural }}.Shared;
using LiteBus.Commands.Abstractions;
using LiteBus.Queries.Abstractions;

namespace {{ WebApiProject.Namespace }}.Controllers;

/// <summary>
/// Controller for managing {{ AggregateRoot.Name.Plural }}.
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Produces("application/json")]
public class {{ AggregateRoot.Name.Plural }}Controller : ControllerBase
{
    private readonly ICommandMediator _commandMediator;
    private readonly IQueryMediator _queryMediator;
    private readonly ILogger<{{ AggregateRoot.Name.Plural }}Controller> _logger;

    /// <summary>
    /// Initializes a new instance of the <see cref="{{ AggregateRoot.Name.Plural }}Controller"/> class.
    /// </summary>
    /// <param name="commandMediator">The command mediator.</param>
    /// <param name="queryMediator">The query mediator.</param>
    /// <param name="logger">The logger.</param>
    public {{ AggregateRoot.Name.Plural }}Controller(ICommandMediator commandMediator, IQueryMediator queryMediator, ILogger<{{ AggregateRoot.Name.Plural }}Controller> logger)
    {
        _commandMediator = commandMediator;
        _queryMediator = queryMediator;
        _logger = logger;
    }

    /// <summary>
    /// Creates a new {{ AggregateRoot.Name }}.
    /// </summary>
    /// <param name="request">The creation request.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The created {{ AggregateRoot.Name }} ID.</returns>
    [HttpPost(Name = "Create{{ AggregateRoot.Name }}")]
    [ProducesResponseType(typeof(Create{{ AggregateRoot.Name }}CommandResult), StatusCodes.Status201Created)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [SwaggerOperation(Summary = "Create a new {{ AggregateRoot.Name }}", Description = "Creates a new {{ AggregateRoot.Name }} with the provided details.")]
    public async Task<IActionResult> CreateAsync([FromBody] Create{{ AggregateRoot.Name }}Request request, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Creating new {{ AggregateRoot.Name }}");
        
        var command = new Create{{ AggregateRoot.Name }}Command
        {
            {{~ func MapProperties
            for property in $0
                if property.Name != "Id"
                    if property.IsComplex ~}}
            {{ property.Name.PascalCase }} = new Create{{ property.Name.PascalCase }}CommandModel
            {
                {{ MapProperties property.NestedProperties | string.indent 16 }}
            },
                    {{~ else ~}}
            {{ property.Name.PascalCase }} = request.{{ property.Name.PascalCase }},
                    {{~ end
                end
            end
            end ~}}
            {{ MapProperties AggregateRoot.Properties }}
        };

        var result = await _commandMediator.SendAsync(command, cancellationToken);
        _logger.LogInformation("Created new {{ AggregateRoot.Name }} with ID: {Id}", result.Id);
        return CreatedAtAction(nameof(GetByIdAsync), new { id = result.Id }, result);
    }

    /// <summary>
    /// Retrieves a specific {{ AggregateRoot.Name }} by its identifier.
    /// </summary>
    /// <param name="id">The {{ AggregateRoot.Name }} identifier.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The requested {{ AggregateRoot.Name }}.</returns>
    [HttpGet("{id}", Name = "Get{{ AggregateRoot.Name }}ById")]
    [ProducesResponseType(typeof({{ AggregateRoot.Name }}ResponseModel), StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [SwaggerOperation(Summary = "Get a specific {{ AggregateRoot.Name }}", Description = "Retrieves a {{ AggregateRoot.Name }} by its unique identifier.")]
    public async Task<ActionResult<{{ AggregateRoot.Name }}ResponseModel>> GetByIdAsync([FromRoute] {{ AggregateRoot.IdType }} id, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Retrieving {{ AggregateRoot.Name }} with ID: {Id}", id);
        
        var query = new Get{{ AggregateRoot.Name }}ByIdQuery { Id = id };
        var result = await _queryMediator.QueryAsync(query, cancellationToken);

        var responseModel = MapToResponseModel(result);
        _logger.LogInformation("Retrieved {{ AggregateRoot.Name }} with ID: {Id}", id);
        return Ok(responseModel);
    }

    /// <summary>
    /// Retrieves all {{ AggregateRoot.Name.Plural }}.
    /// </summary>
    /// <param name="request">The retrieval request.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>A collection of {{ AggregateRoot.Name.Plural }}.</returns>
    [HttpGet(Name = "GetAll{{ AggregateRoot.Name.Plural }}")]
    [ProducesResponseType(typeof(IEnumerable<{{ AggregateRoot.Name }}ResponseModel>), StatusCodes.Status200OK)]
    [SwaggerOperation(Summary = "Get all {{ AggregateRoot.Name.Plural }}", Description = "Retrieves all {{ AggregateRoot.Name.Plural }} with optional pagination.")]
    public async Task<ActionResult<IEnumerable<{{ AggregateRoot.Name }}ResponseModel>>> GetAllAsync([FromQuery] GetAll{{ AggregateRoot.Name.Plural }}Request request, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Retrieving all {{ AggregateRoot.Name.Plural }}");
        
        var query = new GetAll{{ AggregateRoot.Name.Plural }}Query
        {
            PageNumber = request.PageNumber,
            PageSize = request.PageSize,
            SortBy = request.SortBy,
            SortDescending = request.SortDescending
        };

        var results = await _queryMediator.QueryAsync(query, cancellationToken);
        var responseModels = results.Select(MapToResponseModel);
        
        _logger.LogInformation("Retrieved {Count} {{ AggregateRoot.Name.Plural }}", responseModels.Count());
        return Ok(responseModels);
    }

    {{~ for useCase in UseCases ~}}
    {{~ if useCase.Name != "Create" && useCase.Name != "GetById" && useCase.Name != "GetAll" ~}}
    /// <summary>
    /// {{ useCase.Name.Humanize }} a {{ AggregateRoot.Name }}.
    /// </summary>
    /// <param name="id">The {{ AggregateRoot.Name }} identifier.</param>
    /// <param name="request">The {{ useCase.Name.Humanize }} request.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The result of the {{ useCase.Name.Humanize }} operation.</returns>
    [HttpPatch("{id}/{{ useCase.Name.Kebabcase }}", Name = "{{ useCase.Name }}{{ AggregateRoot.Name }}")]
    [ProducesResponseType(StatusCodes.Status204NoContent)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [SwaggerOperation(Summary = "{{ useCase.Name.Humanize }} a {{ AggregateRoot.Name }}", Description = "{{ useCase.Name.Humanize }} a {{ AggregateRoot.Name }} with the provided details.")]
    public async Task<IActionResult> {{ useCase.Name }}Async([FromRoute] {{ AggregateRoot.IdType }} id, [FromBody] {{ useCase.Name }}{{ AggregateRoot.Name }}Request request, CancellationToken cancellationToken)
    {
        _logger.LogInformation("{{ useCase.Name.Humanize }} {{ AggregateRoot.Name }} with ID: {Id}", id);

        var command = new {{ useCase.Name }}{{ AggregateRoot.Name }}Command
        {
            Id = id,
            {{~ func MapParameters
            for parameter in $0
                if parameter.IsComplex ~}}
            {{ parameter.Name.PascalCase }} = new {{ parameter.Name.PascalCase }}CommandModel
            {
                {{ MapParameters parameter.NestedParameters | string.indent 16 }}
            },
                {{~ else ~}}
            {{ parameter.Name.PascalCase }} = request.{{ parameter.Name.PascalCase }},
                {{~ end
            end
            end ~}}
            {{ MapParameters useCase.Parameters }}
        };

        await _commandMediator.SendAsync(command, cancellationToken);
        _logger.LogInformation("{{ useCase.Name.Humanize }} completed for {{ AggregateRoot.Name }} with ID: {Id}", id);
        
        return NoContent();
    }
    {{~ end ~}}
    {{~ end ~}}

    private static {{ AggregateRoot.Name }}ResponseModel MapToResponseModel({{ AggregateRoot.Name }}QueryResult result)
    {
        return new {{ AggregateRoot.Name }}ResponseModel
        {
            {{~ for property in AggregateRoot.Properties ~}}
            {{~ if property.IsComplex ~}}
            {{ property.Name.PascalCase }} = new {{ property.Name.PascalCase }}ResponseModel
            {
                {{~ for nestedProperty in property.NestedProperties ~}}
                {{ nestedProperty.Name.PascalCase }} = result.{{ property.Name.PascalCase }}.{{ nestedProperty.Name.PascalCase }},
                {{~ end ~}}
            },
            {{~ else ~}}
            {{ property.Name.PascalCase }} = result.{{ property.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
        };
    }
}