using System.Runtime.CompilerServices;
using LiteBus.Queries.Abstractions;
using {{ DomainProject.Namespace }}.{{ AggregateRoot.Name.Plural }};

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.GetAll;

public sealed class GetAll{{ AggregateRoot.Name.Plural }}QueryHandler : IStreamQueryHandler<GetAll{{ AggregateRoot.Name.Plural }}Query, {{ AggregateRoot.Name }}QueryResult>
{
    {{~ if Options.UseGenericRepository ~}}
    private readonly IRepository<{{ AggregateRoot.Name }}> _repository;

    public GetAll{{ AggregateRoot.Name.Plural }}QueryHandler(IRepository<{{ AggregateRoot.Name }}> repository)
    {{~ else ~}}
    private readonly I{{ AggregateRoot.Name }}Repository _repository;

    public GetAll{{ AggregateRoot.Name.Plural }}QueryHandler(I{{ AggregateRoot.Name }}Repository repository)
    {{~ end ~}}
    {
        _repository = repository ?? throw new ArgumentNullException(nameof(repository));
    }

    public async IAsyncEnumerable<{{ AggregateRoot.Name }}QueryResult> StreamAsync(GetAll{{ AggregateRoot.Name.Plural }}Query query, [EnumeratorCancellation] CancellationToken cancellationToken = default)
    {
        var {{ AggregateRoot.Name.CamelCase.Plural }} = _repository.GetAllAsync(cancellationToken);

        await foreach (var {{ AggregateRoot.Name.CamelCase }} in {{ AggregateRoot.Name.CamelCase.Plural }}.WithCancellation(cancellationToken))
        {
            yield return new {{ AggregateRoot.Name }}QueryResult
            {
                {{~ for property in AggregateRoot.Properties ~}}
                {{ property.Name.PascalCase }} = {{ AggregateRoot.Name.CamelCase }}.{{ property.Name.PascalCase }},
                {{~ end ~}}
            };
        }
    }
}