using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using LiteBus.Queries.Abstractions;
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Shared;
using {{ DomainProject.Namespace }};
using {{ DomainProject.Namespace }}.{{ AggregateRoot.Name.Plural }};
using Microsoft.Extensions.Logging;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.GetAll;

/// <summary>
/// Handles the retrieval of all {{ AggregateRoot.Name.Plural }}.
/// </summary>
public class GetAll{{ AggregateRoot.Name.Plural }}QueryHandler : IStreamQueryHandler<GetAll{{ AggregateRoot.Name.Plural }}Query, {{ AggregateRoot.Name }}QueryResult>
{
    private readonly {{ if Options.UseGenericRepository }}IRepository<{{ AggregateRoot.Name }}>{{ else }}I{{ AggregateRoot.Name }}Repository{{ end }} _repository;
    private readonly ILogger<GetAll{{ AggregateRoot.Name.Plural }}QueryHandler> _logger;

    /// <summary>
    /// Initializes a new instance of the <see cref="GetAll{{ AggregateRoot.Name.Plural }}QueryHandler"/> class.
    /// </summary>
    /// <param name="repository">The repository used to retrieve the {{ AggregateRoot.Name.Plural }}.</param>
    /// <param name="logger">The logger used for logging.</param>
    public GetAll{{ AggregateRoot.Name.Plural }}QueryHandler(
        {{ if Options.UseGenericRepository }}IRepository<{{ AggregateRoot.Name }}>{{ else }}I{{ AggregateRoot.Name }}Repository{{ end }} repository,
        ILogger<GetAll{{ AggregateRoot.Name.Plural }}QueryHandler> logger)
    {
        _repository = repository;
        _logger = logger;
    }

    /// <summary>
    /// Handles the GetAll{{ AggregateRoot.Name.Plural }}Query and returns the corresponding collection of {{ AggregateRoot.Name }}QueryResult.
    /// </summary>
    /// <param name="query">The query to retrieve all {{ AggregateRoot.Name.Plural }}.</param>
    /// <param name="cancellationToken">A token to cancel the operation.</param>
    /// <returns>An IAsyncEnumerable representing the asynchronous stream of {{ AggregateRoot.Name }}QueryResult.</returns>
    public IAsyncEnumerable<{{ AggregateRoot.Name }}QueryResult> StreamAsync(GetAll{{ AggregateRoot.Name.Plural }}Query query, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Retrieving all {{ AggregateRoot.Name.Plural }}");

        return _repository.GetAllAsync(cancellationToken).Select(entity => new {{ AggregateRoot.Name }}QueryResult
        {
            Id = entity.Id,
            {{~ for property in AggregateRoot.Properties ~}}
            {{~ if property.Name.Original != "Id" ~}}
            {{ property.Name.PascalCase }} = {{ if property.IsComplex }}new {{ property.Name.PascalCase }}QueryResult
            {
                {{~ for nestedProperty in property.NestedProperties ~}}
                {{ nestedProperty.Name.PascalCase }} = entity.{{ property.Name.PascalCase }}.{{ nestedProperty.Name.PascalCase }},
                {{~ end ~}}
            }{{ else }}entity.{{ property.Name.PascalCase }}{{ end }},
            {{~ end ~}}
            {{~ end ~}}
        });
    }
}