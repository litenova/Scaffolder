using LiteBus.Commands.Abstractions;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Create;

/// <summary>
/// Represents a command to create a new {{ AggregateRoot.Name }}.
/// </summary>
public sealed class Create{{ AggregateRoot.Name }}Command : ICommand<Create{{ AggregateRoot.Name }}CommandResult>
{
{{~ for parameter in AggregateRoot.CreateUseCase.Parameters ~}}
    /// <summary>
    /// Gets or initializes the {{ parameter.Name.Humanize }}.
    /// </summary>
    public {{ if parameter.IsRequired }}required {{ end }}{{ if parameter.IsComplex }}{{ parameter.Name.PascalCase }}CommandModel{{ else }}{{ parameter.Type }}{{ end }} {{ parameter.Name.PascalCase }} { get; init; }
{{~ end ~}}
}

{{~ for parameter in AggregateRoot.CreateUseCase.Parameters ~}}
{{~ if parameter.IsComplex ~}}
/// <summary>
/// Represents the {{ parameter.Name.Humanize }} model for creating a {{ AggregateRoot.Name }}.
/// </summary>
public sealed class {{ parameter.Name.PascalCase }}CommandModel
{
    {{~ for nestedParameter in parameter.NestedParameters ~}}
    /// <summary>
    /// Gets or initializes the {{ nestedParameter.Name.Humanize }}.
    /// </summary>
    public {{ if nestedParameter.IsRequired }}required {{ end }}{{ nestedParameter.Type }} {{ nestedParameter.Name.PascalCase }} { get; init; }
    {{~ end ~}}
}

{{~ end ~}}
{{~ end ~}}