using {{ DomainProject.Namespace }};
using {{ DomainProject.Namespace }}.{{ AggregateRoot.Name.Plural }};
using LiteBus.Commands.Abstractions;
using Microsoft.Extensions.Logging;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Create;

public class Create{{ AggregateRoot.Name }}CommandHandler : ICommandHandler<Create{{ AggregateRoot.Name }}Command>
{
{{~ if Options.UseGenericRepository ~}}
    private readonly IRepository<{{ AggregateRoot.Name }}> _repository;
    private readonly ILogger<Create{{ AggregateRoot.Name }}CommandHandler> _logger;

    public Create{{ AggregateRoot.Name }}CommandHandler(IRepository<{{ AggregateRoot.Name }}> repository, ILogger<Create{{ AggregateRoot.Name }}CommandHandler> logger)
{{~ else ~}}
    private readonly I{{ AggregateRoot.Name }}Repository _repository;
    private readonly ILogger<Create{{ AggregateRoot.Name }}CommandHandler> _logger;

    public Create{{ AggregateRoot.Name }}CommandHandler(I{{ AggregateRoot.Name }}Repository repository, ILogger<Create{{ AggregateRoot.Name }}CommandHandler> logger)
{{~ end ~}}
    {
        _repository = repository;
        _logger = logger;
    }

    public async Task HandleAsync(Create{{ AggregateRoot.Name }}Command command, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Creating new {{ AggregateRoot.Name }}");

        var {{ AggregateRoot.Name.CamelCase }} = new {{ AggregateRoot.Name }}
        {
        {{~ func MapProperties
            for property in $0
                if property.IsComplex
        ~}}
            {{ property.Name.PascalCase }} = new {{ property.Type }}
            {
            {{~ for nestedProperty in property.NestedProperties ~}}
                {{ nestedProperty.Name.PascalCase }} = command.{{ property.Name.PascalCase }}.{{ nestedProperty.Name.PascalCase }},
            {{~ end ~}}
            },
        {{~     else
        ~}}
            {{ property.Name.PascalCase }} = command.{{ property.Name.PascalCase }},
        {{~     end
            end
        end ~}}
        {{ MapProperties AggregateRoot.Properties }}
        };

        await _repository.AddAsync({{ AggregateRoot.Name.CamelCase }}, cancellationToken);
        _logger.LogInformation("Created new {{ AggregateRoot.Name }} with ID: {Id}", {{ AggregateRoot.Name.CamelCase }}.Id);
    }
}