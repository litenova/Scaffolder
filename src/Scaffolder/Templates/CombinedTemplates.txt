
==================== ApiController ====================
using System;
using System.Collections.Generic;
using System.Threading;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Swashbuckle.AspNetCore.Annotations;
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }};
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Shared;
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Create;
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.GetById;
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.GetAll;
{{~ for useCase in UseCases ~}}
{{~ if useCase.Name != "Create" && useCase.Name != "GetById" && useCase.Name != "GetAll" ~}}
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.{{ useCase.Name }};
{{~ end ~}}
{{~ end ~}}
using {{ WebApiProject.Namespace }}.Models.{{ AggregateRoot.Name.Plural }}.Shared;
using {{ WebApiProject.Namespace }}.Models.{{ AggregateRoot.Name.Plural }}.Create;
using LiteBus.Commands.Abstractions;
using LiteBus.Queries.Abstractions;

namespace {{ WebApiProject.Namespace }}.Controllers;

/// <summary>
/// Controller for managing {{ AggregateRoot.Name.Plural }}.
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Produces("application/json")]
public sealed class {{ AggregateRoot.Name.Plural }}Controller : ControllerBase
{
    private readonly ICommandMediator _commandMediator;
    private readonly IQueryMediator _queryMediator;
    private readonly ILogger<{{ AggregateRoot.Name.Plural }}Controller> _logger;

    /// <summary>
    /// Initializes a new instance of the <see cref="{{ AggregateRoot.Name.Plural }}Controller"/> class.
    /// </summary>
    /// <param name="commandMediator">The command mediator.</param>
    /// <param name="queryMediator">The query mediator.</param>
    /// <param name="logger">The logger.</param>
    public {{ AggregateRoot.Name.Plural }}Controller(ICommandMediator commandMediator, IQueryMediator queryMediator, ILogger<{{ AggregateRoot.Name.Plural }}Controller> logger)
    {
        _commandMediator = commandMediator;
        _queryMediator = queryMediator;
        _logger = logger;
    }

    /// <summary>
    /// Creates a new {{ AggregateRoot.Name }}.
    /// </summary>
    /// <param name="requestModel">The creation request model.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The created {{ AggregateRoot.Name }} ID.</returns>
    [HttpPost]
    [ProducesResponseType(typeof(Create{{ AggregateRoot.Name }}ResponseModel), StatusCodes.Status201Created)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [SwaggerOperation(Summary = "Create a new {{ AggregateRoot.Name }}", Description = "Creates a new {{ AggregateRoot.Name }} with the provided details.")]
    public async Task<IActionResult> CreateAsync([FromBody] Create{{ AggregateRoot.Name }}RequestModel requestModel, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Creating new {{ AggregateRoot.Name }}");

        var command = new Create{{ AggregateRoot.Name }}Command
        {
            {{~ for parameter in AggregateRoot.CreateUseCase.Parameters ~}}
            {{~ if parameter.IsComplex ~}}
            {{ parameter.Name.PascalCase }} = new {{ parameter.Type }}CommandModel
            {
                {{~ for nestedParameter in parameter.NestedMembers ~}}
                {{ nestedParameter.Name.PascalCase }} = requestModel.{{ parameter.Name.PascalCase }}.{{ nestedParameter.Name.PascalCase }},
                {{~ end ~}}
            },
            {{~ else if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
            {{ parameter.Name.PascalCase }} = requestModel.{{ parameter.Name.PascalCase }}.Select(item => new {{ parameter.ElementType }}CommandModel
            {
                {{~ for nestedParameter in parameter.NestedMembers ~}}
                {{ nestedParameter.Name.PascalCase }} = item.{{ nestedParameter.Name.PascalCase }},
                {{~ end ~}}
            }),
            {{~ else ~}}
            {{ parameter.Name.PascalCase }} = requestModel.{{ parameter.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
        };

        var result = await _commandMediator.SendAsync(command, cancellationToken);

        var response = new Create{{ AggregateRoot.Name }}ResponseModel
        {
            Id = result.Id
        };

        _logger.LogInformation("Created new {{ AggregateRoot.Name }} with ID: {Id}", response.Id);

        return Created($"/api/{{ AggregateRoot.Name.Plural }}/{response.Id}", response);
    }

    /// <summary>
    /// Retrieves a specific {{ AggregateRoot.Name }} by its identifier.
    /// </summary>
    /// <param name="id">The {{ AggregateRoot.Name }} identifier.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The requested {{ AggregateRoot.Name }}.</returns>
    [HttpGet("{id}")]
    [ProducesResponseType(typeof({{ AggregateRoot.Name }}ResponseModel), StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [SwaggerOperation(Summary = "Get a specific {{ AggregateRoot.Name }}", Description = "Retrieves a {{ AggregateRoot.Name }} by its unique identifier.")]
    public async Task<ActionResult<{{ AggregateRoot.Name }}ResponseModel>> GetByIdAsync([FromRoute] {{ AggregateRoot.IdType }} id, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Retrieving {{ AggregateRoot.Name }} with ID: {Id}", id);
        
        var query = new Get{{ AggregateRoot.Name }}ByIdQuery { Id = id };
        var result = await _queryMediator.QueryAsync(query, cancellationToken);

        var responseModel = MapToResponseModel(result);
        _logger.LogInformation("Retrieved {{ AggregateRoot.Name }} with ID: {Id}", id);
        return Ok(responseModel);
    }

    /// <summary>
    /// Retrieves all {{ AggregateRoot.Name.Plural }}.
    /// </summary>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>A collection of {{ AggregateRoot.Name.Plural }}.</returns>
    [HttpGet]
    [ProducesResponseType(typeof(IAsyncEnumerable<{{ AggregateRoot.Name }}ResponseModel>), StatusCodes.Status200OK)]
    [SwaggerOperation(Summary = "Get all {{ AggregateRoot.Name.Plural }}", Description = "Retrieves all {{ AggregateRoot.Name.Plural }}.")]
    public IAsyncEnumerable<{{ AggregateRoot.Name }}ResponseModel> GetAllAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation("Retrieving all {{ AggregateRoot.Name.Plural }}");
        
        var query = new GetAll{{ AggregateRoot.Name.Plural }}Query();
        var results = _queryMediator.StreamAsync(query, cancellationToken);

        return results.Select(MapToResponseModel);
    }

    {{~ for useCase in UseCases ~}}
    {{~ if useCase.Name != "Create" && useCase.Name != "GetById" && useCase.Name != "GetAll" ~}}
    /// <summary>
    /// {{ useCase.Name.Humanize }} a {{ AggregateRoot.Name }}.
    /// </summary>
    /// <param name="id">The {{ AggregateRoot.Name }} identifier.</param>
    /// <param name="requestModel">The {{ useCase.Name.Humanize }} request model.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>The result of the {{ useCase.Name.Humanize }} operation.</returns>
    [HttpPatch("{id}/{{ useCase.Name.Kebabcase }}")]
    [ProducesResponseType(StatusCodes.Status204NoContent)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [SwaggerOperation(Summary = "{{ useCase.Name.Humanize }} a {{ AggregateRoot.Name }}", Description = "{{ useCase.Name.Humanize }} a {{ AggregateRoot.Name }} with the provided details.")]
    public async Task<IActionResult> {{ useCase.Name }}Async([FromRoute] {{ AggregateRoot.IdType }} id, [FromBody] {{ useCase.Name }}{{ AggregateRoot.Name }}RequestModel requestModel, CancellationToken cancellationToken)
    {
        _logger.LogInformation("{{ useCase.Name.Humanize }} {{ AggregateRoot.Name }} with ID: {Id}", id);

        var command = new {{ useCase.Name }}{{ AggregateRoot.Name }}Command
        {
            Id = id,
            {{~ for parameter in useCase.Parameters ~}}
            {{~ if parameter.IsComplex ~}}
            {{ parameter.Name.PascalCase }} = new {{ parameter.Type }}CommandModel
            {
                {{~ for nestedParameter in parameter.NestedMembers ~}}
                {{ nestedParameter.Name.PascalCase }} = requestModel.{{ parameter.Name.PascalCase }}.{{ nestedParameter.Name.PascalCase }},
                {{~ end ~}}
            },
            {{~ else if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
            {{ parameter.Name.PascalCase }} = requestModel.{{ parameter.Name.PascalCase }}.Select(item => new {{ parameter.ElementType }}CommandModel
            {
                {{~ for nestedParameter in parameter.NestedMembers ~}}
                {{ nestedParameter.Name.PascalCase }} = item.{{ nestedParameter.Name.PascalCase }},
                {{~ end ~}}
            }),
            {{~ else ~}}
            {{ parameter.Name.PascalCase }} = requestModel.{{ parameter.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
        };

        await _commandMediator.SendAsync(command, cancellationToken);
        _logger.LogInformation("{{ useCase.Name.Humanize }} completed for {{ AggregateRoot.Name }} with ID: {Id}", id);
        
        return NoContent();
    }
    {{~ end ~}}
    {{~ end ~}}

    private static {{ AggregateRoot.Name }}ResponseModel MapToResponseModel({{ AggregateRoot.Name }}QueryResult result)
    {
        return new {{ AggregateRoot.Name }}ResponseModel
        {
            {{~ for property in AggregateRoot.Properties ~}}
            {{~ if property.IsComplex ~}}
            {{ property.Name.PascalCase }} = new {{ property.Type }}ResponseModel
            {
                {{~ for nestedProperty in property.NestedMembers ~}}
                {{ nestedProperty.Name.PascalCase }} = result.{{ property.Name.PascalCase }}.{{ nestedProperty.Name.PascalCase }},
                {{~ end ~}}
            },
            {{~ else if property.IsCollection && property.IsElementTypeComplex ~}}
            {{ property.Name.PascalCase }} = result.{{ property.Name.PascalCase }}.Select(item => new {{ property.ElementType }}ResponseModel
            {
                {{~ for nestedProperty in property.NestedMembers ~}}
                {{ nestedProperty.Name.PascalCase }} = item.{{ nestedProperty.Name.PascalCase }},
                {{~ end ~}}
            }),
            {{~ else ~}}
            {{ property.Name.PascalCase }} = result.{{ property.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
        };
    }
}

==================== CreateCommand ====================
using System;
using System.Collections.Generic;
using LiteBus.Commands.Abstractions;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Create;

/// <summary>
/// Represents a command to create a new {{ AggregateRoot.Name }}.
/// </summary>
public sealed class Create{{ AggregateRoot.Name }}Command : ICommand<Create{{ AggregateRoot.Name }}CommandResult>
{
{{~ for parameter in AggregateRoot.CreateUseCase.Parameters ~}}
    /// <summary>
    /// Gets or sets {{ parameter.Name.Humanize }}.
    /// </summary>
    public {{ if parameter.IsRequired }}required {{ end }}{{ if parameter.IsCollection }}IEnumerable<{{ if parameter.IsElementTypeComplex }}{{ parameter.ElementType }}CommandModel{{ else }}{{ parameter.ElementType }}{{ end }}>{{ else if parameter.IsComplex }}{{ parameter.Type }}CommandModel{{ else }}{{ parameter.Type }}{{ end }} {{ parameter.Name.PascalCase }} { get; init; }
{{~ end ~}}
}

{{~ for parameter in AggregateRoot.CreateUseCase.Parameters ~}}
{{~ if parameter.IsComplex ~}}
/// <summary>
/// Represents the {{ parameter.Type }} model for creating a {{ AggregateRoot.Name }}.
/// </summary>
public sealed class {{ parameter.Type }}CommandModel
{
    {{~ for nestedParameter in parameter.NestedMembers ~}}
    /// <summary>
    /// Gets or sets {{ nestedParameter.Name.Humanize }}.
    /// </summary>
    public {{ if nestedParameter.IsRequired }}required {{ end }}{{ if nestedParameter.IsCollection }}IEnumerable<{{ if nestedParameter.IsElementTypeComplex }}{{ nestedParameter.ElementType }}CommandModel{{ else }}{{ nestedParameter.ElementType }}{{ end }}>{{ else if nestedParameter.IsComplex }}{{ nestedParameter.Type }}CommandModel{{ else }}{{ nestedParameter.Type }}{{ end }} {{ nestedParameter.Name.PascalCase }} { get; init; }
    {{~ end ~}}
}

{{~ end ~}}
{{~ if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
/// <summary>
/// Represents the {{ parameter.ElementType }} model for creating a {{ AggregateRoot.Name }}.
/// </summary>
public sealed class {{ parameter.ElementType }}CommandModel
{
    {{~ for nestedParameter in parameter.NestedMembers ~}}
    /// <summary>
    /// Gets or sets {{ nestedParameter.Name.Humanize }}.
    /// </summary>
    public {{ if nestedParameter.IsRequired }}required {{ end }}{{ if nestedParameter.IsCollection }}IEnumerable<{{ if nestedParameter.IsElementTypeComplex }}{{ nestedParameter.ElementType }}CommandModel{{ else }}{{ nestedParameter.ElementType }}{{ end }}>{{ else if nestedParameter.IsComplex }}{{ nestedParameter.Type }}CommandModel{{ else }}{{ nestedParameter.Type }}{{ end }} {{ nestedParameter.Name.PascalCase }} { get; init; }
    {{~ end ~}}
}

{{~ end ~}}
{{~ end ~}}

==================== CreateCommandHandler ====================
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using {{ DomainProject.Namespace }};
using {{ DomainProject.Namespace }}.{{ AggregateRoot.Name.Plural }};
using LiteBus.Commands.Abstractions;
using Microsoft.Extensions.Logging;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Create;

/// <summary>
/// Handles the creation of a new {{ AggregateRoot.Name }}.
/// </summary>
internal sealed class Create{{ AggregateRoot.Name }}CommandHandler : ICommandHandler<Create{{ AggregateRoot.Name }}Command, Create{{ AggregateRoot.Name }}CommandResult>
{
{{~ if Options.UseGenericRepository ~}}
    private readonly IRepository<{{ AggregateRoot.Name }}> _repository;
{{~ else ~}}
    private readonly I{{ AggregateRoot.Name }}Repository _repository;
{{~ end ~}}
    private readonly ILogger<Create{{ AggregateRoot.Name }}CommandHandler> _logger;

    /// <summary>
    /// Initializes a new instance of the <see cref="Create{{ AggregateRoot.Name }}CommandHandler"/> class.
    /// </summary>
{{~ if Options.UseGenericRepository ~}}
    public Create{{ AggregateRoot.Name }}CommandHandler(IRepository<{{ AggregateRoot.Name }}> repository, ILogger<Create{{ AggregateRoot.Name }}CommandHandler> logger)
{{~ else ~}}
    public Create{{ AggregateRoot.Name }}CommandHandler(I{{ AggregateRoot.Name }}Repository repository, ILogger<Create{{ AggregateRoot.Name }}CommandHandler> logger)
{{~ end ~}}
    {
        _repository = repository;
        _logger = logger;
    }

    /// <summary>
    /// Handles the command to create a new {{ AggregateRoot.Name }}.
    /// </summary>
    /// <param name="command">The command to create a new {{ AggregateRoot.Name }}.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>A <see cref="Create{{ AggregateRoot.Name }}CommandResult"/> containing the Id of the newly created {{ AggregateRoot.Name }}.</returns>
    public async Task<Create{{ AggregateRoot.Name }}CommandResult> HandleAsync(Create{{ AggregateRoot.Name }}Command command, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Creating new {{ AggregateRoot.Name }}");

        {{ AggregateRoot.Name }} {{ AggregateRoot.Name.CamelCase }};

{{~ if AggregateRoot.CreateUseCase.Mechanism == 'Constructor' ~}}
        {{ AggregateRoot.Name.CamelCase }} = new {{ AggregateRoot.Name }}(
    {{~ for parameter in AggregateRoot.CreateUseCase.Parameters ~}}
            {{~ if parameter.IsComplex ~}}
            new {{ parameter.Type }}
            {
                {{~ for nestedParameter in parameter.NestedMembers ~}}
                {{ nestedParameter.Name.PascalCase }} = Map{{ parameter.Type }}(command.{{ parameter.Name.PascalCase }}),
                {{~ end ~}}
            }{{ if !for.last }},{{ end }}
            {{~ else if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
            Map{{ parameter.ElementType }}Collection(command.{{ parameter.Name.PascalCase }}){{ if !for.last }},{{ end }}
            {{~ else ~}}
            command.{{ parameter.Name.PascalCase }}{{ if !for.last }},{{ end }}
            {{~ end ~}}
    {{~ end ~}}
        );
{{~ else if AggregateRoot.CreateUseCase.Mechanism == 'StaticCreateMethod' ~}}
        {{ AggregateRoot.Name.CamelCase }} = {{ AggregateRoot.Name }}.Create(
    {{~ for parameter in AggregateRoot.CreateUseCase.Parameters ~}}
            {{~ if parameter.IsComplex ~}}
            new {{ parameter.Type }}
            {
                {{~ for nestedParameter in parameter.NestedMembers ~}}
                {{ nestedParameter.Name.PascalCase }} = Map{{ parameter.Type }}(command.{{ parameter.Name.PascalCase }}),
                {{~ end ~}}
            }{{ if !for.last }},{{ end }}
            {{~ else if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
            Map{{ parameter.ElementType }}Collection(command.{{ parameter.Name.PascalCase }}){{ if !for.last }},{{ end }}
            {{~ else ~}}
            command.{{ parameter.Name.PascalCase }}{{ if !for.last }},{{ end }}
            {{~ end ~}}
    {{~ end ~}}
        );
{{~ else ~}}
        {{ AggregateRoot.Name.CamelCase }} = new {{ AggregateRoot.Name }}
        {
    {{~ for parameter in AggregateRoot.CreateUseCase.Parameters ~}}
            {{~ if parameter.IsComplex ~}}
            {{ parameter.Name.PascalCase }} = Map{{ parameter.Type }}(command.{{ parameter.Name.PascalCase }}),
            {{~ else if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
            {{ parameter.Name.PascalCase }} = Map{{ parameter.ElementType }}Collection(command.{{ parameter.Name.PascalCase }}),
            {{~ else ~}}
            {{ parameter.Name.PascalCase }} = command.{{ parameter.Name.PascalCase }},
            {{~ end ~}}
    {{~ end ~}}
        };
{{~ end ~}}

        await _repository.AddAsync({{ AggregateRoot.Name.CamelCase }}, cancellationToken);
        
        _logger.LogInformation("Created new {{ AggregateRoot.Name }} with ID: {Id}", {{ AggregateRoot.Name.CamelCase }}.Id);

        return new Create{{ AggregateRoot.Name }}CommandResult
        {
            Id = {{ AggregateRoot.Name.CamelCase }}.Id
        };
    }

{{~ for parameter in AggregateRoot.CreateUseCase.Parameters ~}}
{{~ if parameter.IsComplex ~}}
    private {{ parameter.Type }} Map{{ parameter.Type }}({{ parameter.Type }}CommandModel model)
    {
        return new {{ parameter.Type }}
        {
    {{~ for nestedParameter in parameter.NestedMembers ~}}
        {{~ if nestedParameter.IsComplex ~}}
            {{ nestedParameter.Name.PascalCase }} = Map{{ nestedParameter.Type }}(model.{{ nestedParameter.Name.PascalCase }}),
        {{~ else if nestedParameter.IsCollection && nestedParameter.IsElementTypeComplex ~}}
            {{ nestedParameter.Name.PascalCase }} = Map{{ nestedParameter.ElementType }}Collection(model.{{ nestedParameter.Name.PascalCase }}),
        {{~ else ~}}
            {{ nestedParameter.Name.PascalCase }} = model.{{ nestedParameter.Name.PascalCase }},
        {{~ end ~}}
    {{~ end ~}}
        };
    }

{{~ end ~}}
{{~ if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
    private IEnumerable<{{ parameter.ElementType }}> Map{{ parameter.ElementType }}Collection(IEnumerable<{{ parameter.ElementType }}CommandModel> models)
    {
        return models.Select(model => new {{ parameter.ElementType }}
        {
    {{~ for nestedParameter in parameter.NestedMembers ~}}
        {{~ if nestedParameter.IsComplex ~}}
            {{ nestedParameter.Name.PascalCase }} = Map{{ nestedParameter.Type }}(model.{{ nestedParameter.Name.PascalCase }}),
        {{~ else if nestedParameter.IsCollection && nestedParameter.IsElementTypeComplex ~}}
            {{ nestedParameter.Name.PascalCase }} = Map{{ nestedParameter.ElementType }}Collection(model.{{ nestedParameter.Name.PascalCase }}),
        {{~ else ~}}
            {{ nestedParameter.Name.PascalCase }} = model.{{ nestedParameter.Name.PascalCase }},
        {{~ end ~}}
    {{~ end ~}}
        });
    }

{{~ end ~}}
{{~ end ~}}
}

==================== CreateCommandResult ====================
namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Create;

/// <summary>
/// Represents the result of creating a new {{ AggregateRoot.Name }}.
/// </summary>
public sealed class Create{{ AggregateRoot.Name }}CommandResult
{
    /// <summary>
    /// Gets the unique identifier of the created {{ AggregateRoot.Name }}.
    /// </summary>
    public required {{ AggregateRoot.IdType }} Id { get; init; }
}

==================== CreateCommandValidator ====================
using LiteBus.Commands.Abstractions;
using {{ DomainProject.Namespace }};
using {{ DomainProject.Namespace }}.{{ AggregateRoot.Name.Plural }};

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Create;

internal sealed class Create{{ AggregateRoot.Name }}CommandValidator : ICommandPreHandler<Create{{ AggregateRoot.Name }}Command>
{
    public Task PreHandleAsync(Create{{ AggregateRoot.Name }}Command command, CancellationToken cancellationToken = default)
    {
        // TODO: Implement validation logic here
        // Example:
        // if (string.IsNullOrWhiteSpace(command.SomeProperty))
        //     throw new ValidationException("SomeProperty cannot be empty.");

        return Task.CompletedTask;
    }
}

==================== CreateRequestModel ====================
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace {{ WebApiProject.Namespace }}.Models.{{ AggregateRoot.Name.Plural }}.Create;

/// <summary>
/// Represents a request to create a new {{ AggregateRoot.Name }}.
/// </summary>
public class Create{{ AggregateRoot.Name }}RequestModel
{
{{~ for member in AggregateRoot.CreateUseCase.Parameters ~}}
    /// <summary>
    /// Gets or sets {{ member.Name.Humanize }}.
    /// </summary>
    {{~ if member.IsRequired ~}}
    [Required]
    {{~ end ~}}
    public {{ if member.IsCollection }}IEnumerable<{{ if member.IsElementTypeComplex }}{{ member.ElementType }}RequestModel{{ else }}{{ member.ElementType }}{{ end }}>{{ else if member.IsComplex }}{{ member.Type }}RequestModel{{ else }}{{ member.Type }}{{ end }}{{ if !member.IsRequired }}{{ end }} {{ member.Name.PascalCase }} { get; set; }{{ if member.IsRequired }} = default!;{{ end }}

{{~ end ~}}
}

{{~ for member in AggregateRoot.CreateUseCase.Parameters ~}}
{{~ if member.IsComplex ~}}
/// <summary>
/// Represents the {{ member.Type }} model for creating a {{ AggregateRoot.Name }}.
/// </summary>
public class {{ member.Type }}RequestModel
{
    {{~ for nestedMember in member.NestedMembers ~}}
    /// <summary>
    /// Gets or sets {{ nestedMember.Name.Humanize }}.
    /// </summary>
    {{~ if nestedMember.IsRequired ~}}
    [Required]
    {{~ end ~}}
    public {{ if nestedMember.IsCollection }}IEnumerable<{{ if nestedMember.IsElementTypeComplex }}{{ nestedMember.ElementType }}RequestModel{{ else }}{{ nestedMember.ElementType }}{{ end }}>{{ else if nestedMember.IsComplex }}{{ nestedMember.Type }}RequestModel{{ else }}{{ nestedMember.Type }}{{ end }}{{ if !nestedMember.IsRequired }}{{ end }} {{ nestedMember.Name.PascalCase }} { get; set; }{{ if nestedMember.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ if member.IsCollection && member.IsElementTypeComplex ~}}
/// <summary>
/// Represents the {{ member.ElementType }} model for creating a {{ AggregateRoot.Name }}.
/// </summary>
public class {{ member.ElementType }}RequestModel
{
    {{~ for nestedMember in member.NestedMembers ~}}
    /// <summary>
    /// Gets or sets {{ nestedMember.Name.Humanize }}.
    /// </summary>
    {{~ if nestedMember.IsRequired ~}}
    [Required]
    {{~ end ~}}
    public {{ if nestedMember.IsCollection }}IEnumerable<{{ if nestedMember.IsElementTypeComplex }}{{ nestedMember.ElementType }}RequestModel{{ else }}{{ nestedMember.ElementType }}{{ end }}>{{ else if nestedMember.IsComplex }}{{ nestedMember.Type }}RequestModel{{ else }}{{ nestedMember.Type }}{{ end }}{{ if !nestedMember.IsRequired }}{{ end }} {{ nestedMember.Name.PascalCase }} { get; set; }{{ if nestedMember.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ end ~}}

==================== CreateResponseModel ====================
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace {{ WebApiProject.Namespace }}.Models.{{ AggregateRoot.Name.Plural }}.Create;

/// <summary>
/// Represents a response model for creating a new {{ AggregateRoot.Name }}.
/// </summary>
public sealed class Create{{ AggregateRoot.Name }}ResponseModel
{
    public required {{ AggregateRoot.IdType }} Id { get; init; }
}


==================== GetAllQuery ====================
using System.Collections.Generic;
using LiteBus.Queries.Abstractions;
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Shared;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.GetAll;

/// <summary>
/// Represents a query to retrieve all {{ AggregateRoot.Name.Plural }}.
/// </summary>
public sealed class GetAll{{ AggregateRoot.Name.Plural }}Query : IStreamQuery<{{ AggregateRoot.Name }}QueryResult>
{
    // This query doesn't require any parameters
}

==================== GetAllQueryHandler ====================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using LiteBus.Queries.Abstractions;
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Shared;
using {{ DomainProject.Namespace }};
using {{ DomainProject.Namespace }}.{{ AggregateRoot.Name.Plural }};
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.GetAll;

/// <summary>
/// Handles the retrieval of all {{ AggregateRoot.Name.Plural }}.
/// </summary>
internal sealed class GetAll{{ AggregateRoot.Name.Plural }}QueryHandler : IStreamQueryHandler<GetAll{{ AggregateRoot.Name.Plural }}Query, {{ AggregateRoot.Name }}QueryResult>
{
    private readonly {{ if Options.UseGenericRepository }}IRepository<{{ AggregateRoot.Name }}>{{ else }}I{{ AggregateRoot.Name }}Repository{{ end }} _repository;
    private readonly ILogger<GetAll{{ AggregateRoot.Name.Plural }}QueryHandler> _logger;

    /// <summary>
    /// Initializes a new instance of the <see cref="GetAll{{ AggregateRoot.Name.Plural }}QueryHandler"/> class.
    /// </summary>
    /// <param name="repository">The repository used to retrieve the {{ AggregateRoot.Name.Plural }}.</param>
    /// <param name="logger">The logger used for logging.</param>
    public GetAll{{ AggregateRoot.Name.Plural }}QueryHandler(
        {{ if Options.UseGenericRepository }}IRepository<{{ AggregateRoot.Name }}>{{ else }}I{{ AggregateRoot.Name }}Repository{{ end }} repository,
        ILogger<GetAll{{ AggregateRoot.Name.Plural }}QueryHandler> logger)
    {
        _repository = repository;
        _logger = logger;
    }

    /// <summary>
    /// Handles the GetAll{{ AggregateRoot.Name.Plural }}Query and returns a stream of {{ AggregateRoot.Name }}QueryResult.
    /// </summary>
    /// <param name="query">The query to retrieve all {{ AggregateRoot.Name.Plural }}.</param>
    /// <param name="cancellationToken">A token to cancel the operation.</param>
    /// <returns>An IAsyncEnumerable of {{ AggregateRoot.Name }}QueryResult.</returns>
    public async IAsyncEnumerable<{{ AggregateRoot.Name }}QueryResult> StreamAsync(GetAll{{ AggregateRoot.Name.Plural }}Query query, [EnumeratorCancellation] CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Retrieving all {{ AggregateRoot.Name.Plural }}");

        var entities = _repository.GetAllAsync(cancellationToken);

        await foreach (var entity in entities)
        {
            yield return MapToQueryResult(entity);
        }

        _logger.LogInformation("Finished streaming {{ AggregateRoot.Name.Plural }}");
    }

    private static {{ AggregateRoot.Name }}QueryResult MapToQueryResult({{ AggregateRoot.Name }} entity)
    {
        return new {{ AggregateRoot.Name }}QueryResult
        {
            Id = entity.Id,
            {{~ for property in AggregateRoot.Properties ~}}
            {{~ if property.Name.Original != "Id" ~}}
            {{~ if property.IsComplex ~}}
            {{ property.Name.PascalCase }} = MapTo{{ property.Type }}QueryResult(entity.{{ property.Name.PascalCase }}),
            {{~ else if property.IsCollection && property.IsElementTypeComplex ~}}
            {{ property.Name.PascalCase }} = MapTo{{ property.ElementType }}QueryResultCollection(entity.{{ property.Name.PascalCase }}),
            {{~ else ~}}
            {{ property.Name.PascalCase }} = entity.{{ property.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
            {{~ end ~}}
        };
    }

    {{~ for property in AggregateRoot.Properties ~}}
    {{~ if property.IsComplex ~}}
    private static {{ property.Type }}QueryResult MapTo{{ property.Type }}QueryResult({{ property.Type }} entity)
    {
        return new {{ property.Type }}QueryResult
        {
            {{~ for nestedProperty in property.NestedMembers ~}}
            {{~ if nestedProperty.IsComplex ~}}
            {{ nestedProperty.Name.PascalCase }} = MapTo{{ nestedProperty.Type }}QueryResult(entity.{{ nestedProperty.Name.PascalCase }}),
            {{~ else if nestedProperty.IsCollection && nestedProperty.IsElementTypeComplex ~}}
            {{ nestedProperty.Name.PascalCase }} = MapTo{{ nestedProperty.ElementType }}QueryResultCollection(entity.{{ nestedProperty.Name.PascalCase }}),
            {{~ else ~}}
            {{ nestedProperty.Name.PascalCase }} = entity.{{ nestedProperty.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
        };
    }

    {{~ end ~}}
    {{~ if property.IsCollection && property.IsElementTypeComplex ~}}
    private static IEnumerable<{{ property.ElementType }}QueryResult> MapTo{{ property.ElementType }}QueryResultCollection(IEnumerable<{{ property.ElementType }}> entities)
    {
        return entities.Select(entity => new {{ property.ElementType }}QueryResult
        {
            {{~ for nestedProperty in property.NestedMembers ~}}
            {{~ if nestedProperty.IsComplex ~}}
            {{ nestedProperty.Name.PascalCase }} = MapTo{{ nestedProperty.Type }}QueryResult(entity.{{ nestedProperty.Name.PascalCase }}),
            {{~ else if nestedProperty.IsCollection && nestedProperty.IsElementTypeComplex ~}}
            {{ nestedProperty.Name.PascalCase }} = MapTo{{ nestedProperty.ElementType }}QueryResultCollection(entity.{{ nestedProperty.Name.PascalCase }}),
            {{~ else ~}}
            {{ nestedProperty.Name.PascalCase }} = entity.{{ nestedProperty.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
        });
    }

    {{~ end ~}}
    {{~ end ~}}
}

==================== GetAllQueryValidator ====================
using LiteBus.Queries.Abstractions;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.GetAll;

internal sealed class GetAll{{ AggregateRoot.Name.Plural }}QueryValidator : IQueryPreHandler<GetAll{{ AggregateRoot.Name.Plural }}Query>
{
    public Task PreHandleAsync(GetAll{{ AggregateRoot.Name.Plural }}Query query, CancellationToken cancellationToken = default)
    {
        // TODO: Implement validation logic here if needed
        // Example:
        // if (query.PageSize.HasValue && query.PageSize.Value <= 0)
        //     throw new ValidationException("Page size must be greater than zero.");

        return Task.CompletedTask;
    }
}

==================== GetByIdQuery ====================
using System;
using LiteBus.Queries.Abstractions;
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Shared;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.GetById;

/// <summary>
/// Represents a query to retrieve a {{ AggregateRoot.Name }} by its identifier.
/// </summary>
public sealed class Get{{ AggregateRoot.Name }}ByIdQuery : IQuery<{{ AggregateRoot.Name }}QueryResult>
{
    /// <summary>
    /// Gets or sets the unique identifier of the {{ AggregateRoot.Name }} to retrieve.
    /// </summary>
    public required {{ AggregateRoot.IdType }} Id { get; init; }
}

==================== GetByIdQueryHandler ====================
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using LiteBus.Queries.Abstractions;
using {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Shared;
using {{ DomainProject.Namespace }};
using {{ DomainProject.Namespace }}.{{ AggregateRoot.Name.Plural }};
using Microsoft.Extensions.Logging;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.GetById;

/// <summary>
/// Handles the retrieval of a {{ AggregateRoot.Name }} by its identifier.
/// </summary>
internal sealed class Get{{ AggregateRoot.Name }}ByIdQueryHandler : IQueryHandler<Get{{ AggregateRoot.Name }}ByIdQuery, {{ AggregateRoot.Name }}QueryResult>
{
    private readonly {{ if Options.UseGenericRepository }}IRepository<{{ AggregateRoot.Name }}>{{ else }}I{{ AggregateRoot.Name }}Repository{{ end }} _repository;
    private readonly ILogger<Get{{ AggregateRoot.Name }}ByIdQueryHandler> _logger;

    /// <summary>
    /// Initializes a new instance of the <see cref="Get{{ AggregateRoot.Name }}ByIdQueryHandler"/> class.
    /// </summary>
    /// <param name="repository">The repository used to retrieve the {{ AggregateRoot.Name }}.</param>
    /// <param name="logger">The logger used for logging.</param>
    public Get{{ AggregateRoot.Name }}ByIdQueryHandler(
        {{ if Options.UseGenericRepository }}IRepository<{{ AggregateRoot.Name }}>{{ else }}I{{ AggregateRoot.Name }}Repository{{ end }} repository,
        ILogger<Get{{ AggregateRoot.Name }}ByIdQueryHandler> logger)
    {
        _repository = repository;
        _logger = logger;
    }

    /// <summary>
    /// Handles the Get{{ AggregateRoot.Name }}ByIdQuery and returns the corresponding {{ AggregateRoot.Name }}QueryResult.
    /// </summary>
    /// <param name="query">The query containing the identifier of the {{ AggregateRoot.Name }} to retrieve.</param>
    /// <param name="cancellationToken">A token to cancel the operation.</param>
    /// <returns>A task representing the asynchronous operation, containing the {{ AggregateRoot.Name }}QueryResult.</returns>
    public async Task<{{ AggregateRoot.Name }}QueryResult> HandleAsync(Get{{ AggregateRoot.Name }}ByIdQuery query, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Retrieving {{ AggregateRoot.Name }} with ID: {Id}", query.Id);

        var entity = await _repository.GetByIdAsync(query.Id, cancellationToken);

        _logger.LogInformation("Successfully retrieved {{ AggregateRoot.Name }} with ID: {Id}", query.Id);

        return MapToQueryResult(entity);
    }

    private static {{ AggregateRoot.Name }}QueryResult MapToQueryResult({{ AggregateRoot.Name }} entity)
    {
        return new {{ AggregateRoot.Name }}QueryResult
        {
            Id = entity.Id,
            {{~ for property in AggregateRoot.Properties ~}}
            {{~ if property.Name.Original != "Id" ~}}
            {{~ if property.IsComplex ~}}
            {{ property.Name.PascalCase }} = MapTo{{ property.Type }}QueryResult(entity.{{ property.Name.PascalCase }}),
            {{~ else if property.IsCollection && property.IsElementTypeComplex ~}}
            {{ property.Name.PascalCase }} = MapTo{{ property.ElementType }}QueryResultCollection(entity.{{ property.Name.PascalCase }}),
            {{~ else ~}}
            {{ property.Name.PascalCase }} = entity.{{ property.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
            {{~ end ~}}
        };
    }

    {{~ for property in AggregateRoot.Properties ~}}
    {{~ if property.IsComplex ~}}
    private static {{ property.Type }}QueryResult MapTo{{ property.Type }}QueryResult({{ property.Type }} entity)
    {
        return new {{ property.Type }}QueryResult
        {
            {{~ for nestedProperty in property.NestedMembers ~}}
            {{~ if nestedProperty.IsComplex ~}}
            {{ nestedProperty.Name.PascalCase }} = MapTo{{ nestedProperty.Type }}QueryResult(entity.{{ nestedProperty.Name.PascalCase }}),
            {{~ else if nestedProperty.IsCollection && nestedProperty.IsElementTypeComplex ~}}
            {{ nestedProperty.Name.PascalCase }} = MapTo{{ nestedProperty.ElementType }}QueryResultCollection(entity.{{ nestedProperty.Name.PascalCase }}),
            {{~ else ~}}
            {{ nestedProperty.Name.PascalCase }} = entity.{{ nestedProperty.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
        };
    }

    {{~ end ~}}
    {{~ if property.IsCollection && property.IsElementTypeComplex ~}}
    private static IEnumerable<{{ property.ElementType }}QueryResult> MapTo{{ property.ElementType }}QueryResultCollection(IEnumerable<{{ property.ElementType }}> entities)
    {
        return entities.Select(entity => new {{ property.ElementType }}QueryResult
        {
            {{~ for nestedProperty in property.NestedMembers ~}}
            {{~ if nestedProperty.IsComplex ~}}
            {{ nestedProperty.Name.PascalCase }} = MapTo{{ nestedProperty.Type }}QueryResult(entity.{{ nestedProperty.Name.PascalCase }}),
            {{~ else if nestedProperty.IsCollection && nestedProperty.IsElementTypeComplex ~}}
            {{ nestedProperty.Name.PascalCase }} = MapTo{{ nestedProperty.ElementType }}QueryResultCollection(entity.{{ nestedProperty.Name.PascalCase }}),
            {{~ else ~}}
            {{ nestedProperty.Name.PascalCase }} = entity.{{ nestedProperty.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
        });
    }

    {{~ end ~}}
    {{~ end ~}}
}

==================== GetByIdQueryValidator ====================
using LiteBus.Queries.Abstractions;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.GetById;

/// <summary>
/// Validates the Get{{ AggregateRoot.Name }}ByIdQuery before it is handled.
/// </summary>
internal sealed class Get{{ AggregateRoot.Name }}ByIdQueryValidator : IQueryPreHandler<Get{{ AggregateRoot.Name }}ByIdQuery>
{
    /// <summary>
    /// Validates the Get{{ AggregateRoot.Name }}ByIdQuery.
    /// </summary>
    /// <param name="query">The query to validate.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    public Task PreHandleAsync(Get{{ AggregateRoot.Name }}ByIdQuery query, CancellationToken cancellationToken = default)
    {
        // TODO: Implement validation logic here
        // Example:
        // if (query.Id == default)
        //     throw new ValidationException("Id must have a valid value.");

        return Task.CompletedTask;
    }
}

==================== SharedQueryResult ====================
using System;
using System.Collections.Generic;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Shared;

/// <summary>
/// Represents the query result for {{ AggregateRoot.Name }} operations.
/// </summary>
public class {{ AggregateRoot.Name }}QueryResult
{
    /// <summary>
    /// Gets or initializes the unique identifier of the {{ AggregateRoot.Name }}.
    /// </summary>
    public required {{ AggregateRoot.IdType }} Id { get; init; }

    {{~ for property in AggregateRoot.Properties ~}}
    {{~ if property.Name.Original != "Id" ~}}
    /// <summary>
    /// Gets or initializes {{ property.Name.Humanize }} of the {{ AggregateRoot.Name }}.
    /// </summary>
    public {{ if property.IsCollection }}IEnumerable<{{ if property.IsElementTypeComplex }}{{ property.ElementType }}QueryResult{{ else }}{{ property.ElementType }}{{ end }}>{{ else if property.IsComplex }}{{ property.Type }}QueryResult{{ else }}{{ property.Type }}{{ end }}{{ if !property.IsRequired }}{{ end }} {{ property.Name.PascalCase }} { get; init; }{{ if property.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
    {{~ end ~}}
}

{{~ for property in AggregateRoot.Properties ~}}
{{~ if property.IsComplex ~}}
/// <summary>
/// Represents the {{ property.Type }} of a {{ AggregateRoot.Name }}.
/// </summary>
public class {{ property.Type }}QueryResult
{
    {{~ for nestedProperty in property.NestedMembers ~}}
    /// <summary>
    /// Gets or initializes {{ nestedProperty.Name.Humanize }} of the {{ property.Type }}.
    /// </summary>
    public {{ if nestedProperty.IsCollection }}IEnumerable<{{ if nestedProperty.IsElementTypeComplex }}{{ nestedProperty.ElementType }}QueryResult{{ else }}{{ nestedProperty.ElementType }}{{ end }}>{{ else if nestedProperty.IsComplex }}{{ nestedProperty.Type }}QueryResult{{ else }}{{ nestedProperty.Type }}{{ end }}{{ if !nestedProperty.IsRequired }}{{ end }} {{ nestedProperty.Name.PascalCase }} { get; init; }{{ if nestedProperty.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ if property.IsCollection && property.IsElementTypeComplex ~}}
/// <summary>
/// Represents the {{ property.ElementType }} of a {{ AggregateRoot.Name }}.
/// </summary>
public class {{ property.ElementType }}QueryResult
{
    {{~ for nestedProperty in property.NestedMembers ~}}
    /// <summary>
    /// Gets or initializes {{ nestedProperty.Name.Humanize }} of the {{ property.ElementType }}.
    /// </summary>
    public {{ if nestedProperty.IsCollection }}IEnumerable<{{ if nestedProperty.IsElementTypeComplex }}{{ nestedProperty.ElementType }}QueryResult{{ else }}{{ nestedProperty.ElementType }}{{ end }}>{{ else if nestedProperty.IsComplex }}{{ nestedProperty.Type }}QueryResult{{ else }}{{ nestedProperty.Type }}{{ end }}{{ if !nestedProperty.IsRequired }}{{ end }} {{ nestedProperty.Name.PascalCase }} { get; init; }{{ if nestedProperty.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ end ~}}

==================== SharedResponseModel ====================
using System;
using System.Collections.Generic;

namespace {{ WebApiProject.Namespace }}.Models.{{ AggregateRoot.Name.Plural }}.Shared;

/// <summary>
/// Represents the response model for {{ AggregateRoot.Name }} operations.
/// </summary>
public class {{ AggregateRoot.Name }}ResponseModel
{
    /// <summary>
    /// Gets or initializes the unique identifier of the {{ AggregateRoot.Name }}.
    /// </summary>
    public required {{ AggregateRoot.IdType }} Id { get; init; }

    {{~ for property in AggregateRoot.Properties ~}}
    {{~ if property.Name.Original != "Id" ~}}
    /// <summary>
    /// Gets or initializes {{ property.Name.Humanize }} of the {{ AggregateRoot.Name }}.
    /// </summary>
    public {{ if property.IsCollection }}IEnumerable<{{ if property.IsElementTypeComplex }}{{ property.ElementType }}ResponseModel{{ else }}{{ property.ElementType }}{{ end }}>{{ else if property.IsComplex }}{{ property.Type }}ResponseModel{{ else }}{{ property.Type }}{{ end }}{{ if !property.IsRequired }}{{ end }} {{ property.Name.PascalCase }} { get; init; }{{ if property.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
    {{~ end ~}}
}

{{~ for property in AggregateRoot.Properties ~}}
{{~ if property.IsComplex ~}}
/// <summary>
/// Represents the {{ property.Type }} of a {{ AggregateRoot.Name }}.
/// </summary>
public class {{ property.Type }}ResponseModel
{
    {{~ for nestedProperty in property.NestedMembers ~}}
    /// <summary>
    /// Gets or initializes {{ nestedProperty.Name.Humanize }} of the {{ property.Type }}.
    /// </summary>
    public {{ if nestedProperty.IsCollection }}IEnumerable<{{ if nestedProperty.IsElementTypeComplex }}{{ nestedProperty.ElementType }}ResponseModel{{ else }}{{ nestedProperty.ElementType }}{{ end }}>{{ else if nestedProperty.IsComplex }}{{ nestedProperty.Type }}ResponseModel{{ else }}{{ nestedProperty.Type }}{{ end }}{{ if !nestedProperty.IsRequired }}{{ end }} {{ nestedProperty.Name.PascalCase }} { get; init; }{{ if nestedProperty.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ if property.IsCollection && property.IsElementTypeComplex ~}}
/// <summary>
/// Represents the {{ property.ElementType }} of a {{ AggregateRoot.Name }}.
/// </summary>
public class {{ property.ElementType }}ResponseModel
{
    {{~ for nestedProperty in property.NestedMembers ~}}
    /// <summary>
    /// Gets or initializes {{ nestedProperty.Name.Humanize }} of the {{ property.ElementType }}.
    /// </summary>
    public {{ if nestedProperty.IsCollection }}IEnumerable<{{ if nestedProperty.IsElementTypeComplex }}{{ nestedProperty.ElementType }}ResponseModel{{ else }}{{ nestedProperty.ElementType }}{{ end }}>{{ else if nestedProperty.IsComplex }}{{ nestedProperty.Type }}ResponseModel{{ else }}{{ nestedProperty.Type }}{{ end }}{{ if !nestedProperty.IsRequired }}{{ end }} {{ nestedProperty.Name.PascalCase }} { get; init; }{{ if nestedProperty.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ end ~}}

==================== UseCaseCommand ====================
using System;
using System.Collections.Generic;
using LiteBus.Commands.Abstractions;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.{{ UseCase.Name }};

/// <summary>
/// Represents a command to {{ UseCase.Name.Humanize }} a {{ AggregateRoot.Name }}.
/// </summary>
public sealed class {{ UseCase.Name }}{{ AggregateRoot.Name }}Command : ICommand
{
    /// <summary>
    /// Gets or initializes the unique identifier of the {{ AggregateRoot.Name }}.
    /// </summary>
    public required {{ AggregateRoot.IdType }} Id { get; init; }

    {{~ for parameter in UseCase.Parameters ~}}
    /// <summary>
    /// Gets or initializes {{ parameter.Name.Humanize }}.
    /// </summary>
    public {{ if parameter.IsCollection }}IEnumerable<{{ if parameter.IsElementTypeComplex }}{{ parameter.ElementType }}CommandModel{{ else }}{{ parameter.ElementType }}{{ end }}>{{ else if parameter.IsComplex }}{{ parameter.Type }}CommandModel{{ else }}{{ parameter.Type }}{{ end }}{{ if !parameter.IsRequired }}{{ end }} {{ parameter.Name.PascalCase }} { get; init; }{{ if parameter.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ for parameter in UseCase.Parameters ~}}
{{~ if parameter.IsComplex ~}}
/// <summary>
/// Represents the {{ parameter.Type }} model for the {{ UseCase.Name.Humanize }} command on {{ AggregateRoot.Name }}.
/// </summary>
public sealed class {{ parameter.Type }}CommandModel
{
    {{~ for nestedParameter in parameter.NestedMembers ~}}
    /// <summary>
    /// Gets or initializes {{ nestedParameter.Name.Humanize }}.
    /// </summary>
    public {{ if nestedParameter.IsCollection }}IEnumerable<{{ if nestedParameter.IsElementTypeComplex }}{{ nestedParameter.ElementType }}CommandModel{{ else }}{{ nestedParameter.ElementType }}{{ end }}>{{ else if nestedParameter.IsComplex }}{{ nestedParameter.Type }}CommandModel{{ else }}{{ nestedParameter.Type }}{{ end }}{{ if !nestedParameter.IsRequired }}{{ end }} {{ nestedParameter.Name.PascalCase }} { get; init; }{{ if nestedParameter.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
/// <summary>
/// Represents the {{ parameter.ElementType }} model for the {{ UseCase.Name.Humanize }} command on {{ AggregateRoot.Name }}.
/// </summary>
public sealed class {{ parameter.ElementType }}CommandModel
{
    {{~ for nestedParameter in parameter.NestedMembers ~}}
    /// <summary>
    /// Gets or initializes {{ nestedParameter.Name.Humanize }}.
    /// </summary>
    public {{ if nestedParameter.IsCollection }}IEnumerable<{{ if nestedParameter.IsElementTypeComplex }}{{ nestedParameter.ElementType }}CommandModel{{ else }}{{ nestedParameter.ElementType }}{{ end }}>{{ else if nestedParameter.IsComplex }}{{ nestedParameter.Type }}CommandModel{{ else }}{{ nestedParameter.Type }}{{ end }}{{ if !nestedParameter.IsRequired }}{{ end }} {{ nestedParameter.Name.PascalCase }} { get; init; }{{ if nestedParameter.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ end ~}}

==================== UseCaseCommandHandler ====================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using {{ DomainProject.Namespace }};
using {{ DomainProject.Namespace }}.{{ AggregateRoot.Name.Plural }};
using LiteBus.Commands.Abstractions;
using Microsoft.Extensions.Logging;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.{{ UseCase.Name }};

/// <summary>
/// Handles the {{ UseCase.Name.Humanize }} command for {{ AggregateRoot.Name }}.
/// </summary>
internal sealed class {{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler : ICommandHandler<{{ UseCase.Name }}{{ AggregateRoot.Name }}Command>
{
    {{~ if Options.UseGenericRepository ~}}
    private readonly IRepository<{{ AggregateRoot.Name }}> _repository;
    {{~ else ~}}
    private readonly I{{ AggregateRoot.Name }}Repository _repository;
    {{~ end ~}}
    private readonly ILogger<{{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler> _logger;

    /// <summary>
    /// Initializes a new instance of the <see cref="{{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler"/> class.
    /// </summary>
    /// <param name="repository">The repository for {{ AggregateRoot.Name }} entities.</param>
    /// <param name="logger">The logger.</param>
    public {{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler(
        {{~ if Options.UseGenericRepository ~}}
        IRepository<{{ AggregateRoot.Name }}> repository,
        {{~ else ~}}
        I{{ AggregateRoot.Name }}Repository repository,
        {{~ end ~}}
        ILogger<{{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler> logger)
    {
        _repository = repository;
        _logger = logger;
    }

    /// <summary>
    /// Handles the {{ UseCase.Name.Humanize }} command for {{ AggregateRoot.Name }}.
    /// </summary>
    /// <param name="command">The command to handle.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    public async Task HandleAsync({{ UseCase.Name }}{{ AggregateRoot.Name }}Command command, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Executing {{ UseCase.Name }} command for {{ AggregateRoot.Name }} with ID: {Id}", command.Id);

        var {{ AggregateRoot.Name.CamelCase }} = await _repository.GetAsync(command.Id, cancellationToken);

        {{ AggregateRoot.Name.CamelCase }}.{{ UseCase.Name }}(
            {{~ for parameter in UseCase.Parameters ~}}
            {{~ if parameter.IsComplex ~}}
            MapTo{{ parameter.Type }}(command.{{ parameter.Name.PascalCase }}){{~ if !for.last ~}},{{~ end ~}}
            {{~ else if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
            MapTo{{ parameter.ElementType }}Collection(command.{{ parameter.Name.PascalCase }}){{~ if !for.last ~}},{{~ end ~}}
            {{~ else ~}}
            command.{{ parameter.Name.PascalCase }}{{~ if !for.last ~}},{{~ end ~}}
            {{~ end ~}}
            {{~ end ~}}
        );

        await _repository.UpdateAsync({{ AggregateRoot.Name.CamelCase }}, cancellationToken);
        
        _logger.LogInformation("Successfully executed {{ UseCase.Name }} command for {{ AggregateRoot.Name }} with ID: {Id}", command.Id);
    }

    {{~ for parameter in UseCase.Parameters ~}}
    {{~ if parameter.IsComplex ~}}
    private static {{ parameter.Type }} MapTo{{ parameter.Type }}({{ parameter.Type }}CommandModel model)
    {
        return new {{ parameter.Type }}
        {
            {{~ for nestedParameter in parameter.NestedMembers ~}}
            {{~ if nestedParameter.IsComplex ~}}
            {{ nestedParameter.Name.PascalCase }} = MapTo{{ nestedParameter.Type }}(model.{{ nestedParameter.Name.PascalCase }}),
            {{~ else if nestedParameter.IsCollection && nestedParameter.IsElementTypeComplex ~}}
            {{ nestedParameter.Name.PascalCase }} = MapTo{{ nestedParameter.ElementType }}Collection(model.{{ nestedParameter.Name.PascalCase }}),
            {{~ else ~}}
            {{ nestedParameter.Name.PascalCase }} = model.{{ nestedParameter.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
        };
    }

    {{~ end ~}}
    {{~ if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
    private static IEnumerable<{{ parameter.ElementType }}> MapTo{{ parameter.ElementType }}Collection(IEnumerable<{{ parameter.ElementType }}CommandModel> models)
    {
        return models.Select(model => new {{ parameter.ElementType }}
        {
            {{~ for nestedParameter in parameter.NestedMembers ~}}
            {{~ if nestedParameter.IsComplex ~}}
            {{ nestedParameter.Name.PascalCase }} = MapTo{{ nestedParameter.Type }}(model.{{ nestedParameter.Name.PascalCase }}),
            {{~ else if nestedParameter.IsCollection && nestedParameter.IsElementTypeComplex ~}}
            {{ nestedParameter.Name.PascalCase }} = MapTo{{ nestedParameter.ElementType }}Collection(model.{{ nestedParameter.Name.PascalCase }}),
            {{~ else ~}}
            {{ nestedParameter.Name.PascalCase }} = model.{{ nestedParameter.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
        });
    }

    {{~ end ~}}
    {{~ end ~}}
}

==================== UseCaseCommandValidator ====================
using LiteBus.Commands.Abstractions;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.{{ UseCase.Name }};

internal sealed class {{ UseCase.Name }}{{ AggregateRoot.Name }}CommandValidator : ICommandPreHandler<{{ UseCase.Name }}{{ AggregateRoot.Name }}Command>
{
    public Task PreHandleAsync({{ UseCase.Name }}{{ AggregateRoot.Name }}Command command, CancellationToken cancellationToken = default)
    {
        // TODO: Implement validation logic here

        return Task.CompletedTask;
    }
}

==================== UseCaseRequestModel ====================
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace {{ WebApiProject.Namespace }}.Models.{{ AggregateRoot.Name.Plural }}.{{ UseCase.Name }};

/// <summary>
/// Represents a request model for the {{ UseCase.Name.Humanize }} operation on {{ AggregateRoot.Name }}.
/// </summary>
public class {{ UseCase.Name }}{{ AggregateRoot.Name }}RequestModel
{
{{~ for parameter in UseCase.Parameters ~}}
    /// <summary>
    /// Gets or sets {{ parameter.Name.Humanize }}.
    /// </summary>
    {{~ if parameter.IsRequired ~}}
    [Required]
    {{~ end ~}}
    public {{ if parameter.IsCollection }}IEnumerable<{{ if parameter.IsElementTypeComplex }}{{ parameter.ElementType }}RequestModel{{ else }}{{ parameter.ElementType }}{{ end }}>{{ else if parameter.IsComplex }}{{ parameter.Type }}RequestModel{{ else }}{{ parameter.Type }}{{ end }}{{ if !parameter.IsRequired }}{{ end }} {{ parameter.Name.PascalCase }} { get; set; }{{ if parameter.IsRequired }} = default!;{{ end }}

{{~ end ~}}
}

{{~ for parameter in UseCase.Parameters ~}}
{{~ if parameter.IsComplex ~}}
/// <summary>
/// Represents the {{ parameter.Type }} model for the {{ UseCase.Name.Humanize }} operation on {{ AggregateRoot.Name }}.
/// </summary>
public class {{ parameter.Type }}RequestModel
{
    {{~ for nestedParameter in parameter.NestedMembers ~}}
    /// <summary>
    /// Gets or sets {{ nestedParameter.Name.Humanize }}.
    /// </summary>
    {{~ if nestedParameter.IsRequired ~}}
    [Required]
    {{~ end ~}}
    public {{ if nestedParameter.IsCollection }}IEnumerable<{{ if nestedParameter.IsElementTypeComplex }}{{ nestedParameter.ElementType }}RequestModel{{ else }}{{ nestedParameter.ElementType }}{{ end }}>{{ else if nestedParameter.IsComplex }}{{ nestedParameter.Type }}RequestModel{{ else }}{{ nestedParameter.Type }}{{ end }}{{ if !nestedParameter.IsRequired }}{{ end }} {{ nestedParameter.Name.PascalCase }} { get; set; }{{ if nestedParameter.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
/// <summary>
/// Represents the {{ parameter.ElementType }} model for the {{ UseCase.Name.Humanize }} operation on {{ AggregateRoot.Name }}.
/// </summary>
public class {{ parameter.ElementType }}RequestModel
{
    {{~ for nestedParameter in parameter.NestedMembers ~}}
    /// <summary>
    /// Gets or sets {{ nestedParameter.Name.Humanize }}.
    /// </summary>
    {{~ if nestedParameter.IsRequired ~}}
    [Required]
    {{~ end ~}}
    public {{ if nestedParameter.IsCollection }}IEnumerable<{{ if nestedParameter.IsElementTypeComplex }}{{ nestedParameter.ElementType }}RequestModel{{ else }}{{ nestedParameter.ElementType }}{{ end }}>{{ else if nestedParameter.IsComplex }}{{ nestedParameter.Type }}RequestModel{{ else }}{{ nestedParameter.Type }}{{ end }}{{ if !nestedParameter.IsRequired }}{{ end }} {{ nestedParameter.Name.PascalCase }} { get; set; }{{ if nestedParameter.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ end ~}}
