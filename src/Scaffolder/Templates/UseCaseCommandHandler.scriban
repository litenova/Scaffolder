using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using {{ DomainProject.Namespace }};
using {{ DomainProject.Namespace }}.{{ AggregateRoot.Name.Plural }};
using LiteBus.Commands.Abstractions;
using Microsoft.Extensions.Logging;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.{{ UseCase.Name }};

/// <summary>
/// Handles the {{ UseCase.Name.Humanize }} command for {{ AggregateRoot.Name }}.
/// </summary>
internal sealed class {{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler : ICommandHandler<{{ UseCase.Name }}{{ AggregateRoot.Name }}Command>
{
    {{~ if Options.UseGenericRepository ~}}
    private readonly IRepository<{{ AggregateRoot.Name }}> _repository;
    {{~ else ~}}
    private readonly I{{ AggregateRoot.Name }}Repository _repository;
    {{~ end ~}}
    private readonly ILogger<{{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler> _logger;

    /// <summary>
    /// Initializes a new instance of the <see cref="{{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler"/> class.
    /// </summary>
    /// <param name="repository">The repository for {{ AggregateRoot.Name }} entities.</param>
    /// <param name="logger">The logger.</param>
    public {{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler(
        {{~ if Options.UseGenericRepository ~}}
        IRepository<{{ AggregateRoot.Name }}> repository,
        {{~ else ~}}
        I{{ AggregateRoot.Name }}Repository repository,
        {{~ end ~}}
        ILogger<{{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler> logger)
    {
        _repository = repository;
        _logger = logger;
    }

    /// <summary>
    /// Handles the {{ UseCase.Name.Humanize }} command for {{ AggregateRoot.Name }}.
    /// </summary>
    /// <param name="command">The command to handle.</param>
    /// <param name="cancellationToken">The cancellation token.</param>
    public async Task HandleAsync({{ UseCase.Name }}{{ AggregateRoot.Name }}Command command, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Executing {{ UseCase.Name }} command for {{ AggregateRoot.Name }} with ID: {Id}", command.Id);

        var {{ AggregateRoot.Name.CamelCase }} = await _repository.GetByIdAsync(command.Id, cancellationToken);

        {{ AggregateRoot.Name.CamelCase }}.{{ UseCase.Name }}(
            {{~ for parameter in UseCase.Parameters ~}}
            {{~ if parameter.IsComplex ~}}
            MapTo{{ parameter.Type }}(command.{{ parameter.Name.PascalCase }}){{~ if !for.last ~}},{{~ end ~}}
            {{~ else if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
            MapTo{{ parameter.ElementType }}Collection(command.{{ parameter.Name.PascalCase }}){{~ if !for.last ~}},{{~ end ~}}
            {{~ else ~}}
            command.{{ parameter.Name.PascalCase }}{{~ if !for.last ~}},{{~ end ~}}
            {{~ end ~}}
            {{~ end ~}}
        );

        await _repository.UpdateAsync({{ AggregateRoot.Name.CamelCase }}, {{ AggregateRoot.Name.CamelCase }}, cancellationToken);
        
        _logger.LogInformation("Successfully executed {{ UseCase.Name }} command for {{ AggregateRoot.Name }} with ID: {Id}", command.Id);
    }

    {{~ for parameter in UseCase.Parameters ~}}
    {{~ if parameter.IsComplex ~}}
    private static {{ parameter.Type }} MapTo{{ parameter.Type }}({{ parameter.Type }}CommandModel model)
    {
        return new {{ parameter.Type }}
        {
            {{~ for nestedParameter in parameter.NestedMembers ~}}
            {{~ if nestedParameter.IsComplex ~}}
            {{ nestedParameter.Name.PascalCase }} = MapTo{{ nestedParameter.Type }}(model.{{ nestedParameter.Name.PascalCase }}),
            {{~ else if nestedParameter.IsCollection && nestedParameter.IsElementTypeComplex ~}}
            {{ nestedParameter.Name.PascalCase }} = MapTo{{ nestedParameter.ElementType }}Collection(model.{{ nestedParameter.Name.PascalCase }}),
            {{~ else ~}}
            {{ nestedParameter.Name.PascalCase }} = model.{{ nestedParameter.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
        };
    }

    {{~ end ~}}
    {{~ if parameter.IsCollection && parameter.IsElementTypeComplex ~}}
    private static IEnumerable<{{ parameter.ElementType }}> MapTo{{ parameter.ElementType }}Collection(IEnumerable<{{ parameter.ElementType }}CommandModel> models)
    {
        return models.Select(model => new {{ parameter.ElementType }}
        {
            {{~ for nestedParameter in parameter.NestedMembers ~}}
            {{~ if nestedParameter.IsComplex ~}}
            {{ nestedParameter.Name.PascalCase }} = MapTo{{ nestedParameter.Type }}(model.{{ nestedParameter.Name.PascalCase }}),
            {{~ else if nestedParameter.IsCollection && nestedParameter.IsElementTypeComplex ~}}
            {{ nestedParameter.Name.PascalCase }} = MapTo{{ nestedParameter.ElementType }}Collection(model.{{ nestedParameter.Name.PascalCase }}),
            {{~ else ~}}
            {{ nestedParameter.Name.PascalCase }} = model.{{ nestedParameter.Name.PascalCase }},
            {{~ end ~}}
            {{~ end ~}}
        });
    }

    {{~ end ~}}
    {{~ end ~}}
}