using {{ DomainProject.Namespace }};
using {{ DomainProject.Namespace }}.{{ AggregateRoot.Name.Plural }};
using LiteBus.Commands.Abstractions;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.{{ UseCase.Name }};

public class {{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler : ICommandHandler<{{ UseCase.Name }}{{ AggregateRoot.Name }}Command>
{
    {{~ if Options.UseGenericRepository ~}}
    private readonly IRepository<{{ AggregateRoot.Name }}> _repository;

    public {{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler(IRepository<{{ AggregateRoot.Name }}> repository)
    {{~ else ~}}
    private readonly I{{ AggregateRoot.Name }}Repository _repository;

    public {{ UseCase.Name }}{{ AggregateRoot.Name }}CommandHandler(I{{ AggregateRoot.Name }}Repository repository)
    {{~ end ~}}
    {
        _repository = repository;
    }

    public async Task HandleAsync({{ UseCase.Name }}{{ AggregateRoot.Name }}Command command, CancellationToken cancellationToken = default)
    {
        var {{ AggregateRoot.Name.CamelCase }} = await _repository.GetAsync(command.Id, cancellationToken);

        {{ AggregateRoot.Name.CamelCase }}.{{ UseCase.Name }}(
            {{~ func MapParameters
                for parameter in $0
                    if parameter.IsComplex
            ~}}
            new {{ parameter.Type }}
            {
                {{ MapParameters parameter.NestedParameters | string.indent 4 }}
            }{{~ if !for.last ~}},{{~ end ~}}
            {{~     else
            ~}}
            command.{{ parameter.Name.PascalCase }}{{~ if !for.last ~}},{{~ end ~}}
            {{~     end
                end
            end ~}}
            {{ MapParameters UseCase.Parameters }}
        );

        await _repository.UpdateAsync({{ AggregateRoot.Name.CamelCase }}, cancellationToken);
    }
}