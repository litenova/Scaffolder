using System;
using System.Collections.Generic;

namespace {{ ApplicationProject.Namespace }}.{{ AggregateRoot.Name.Plural }}.Shared;

/// <summary>
/// Represents the query result for {{ AggregateRoot.Name }} operations.
/// </summary>
public class {{ AggregateRoot.Name }}QueryResult
{
    /// <summary>
    /// Gets or initializes the unique identifier of the {{ AggregateRoot.Name }}.
    /// </summary>
    public required {{ AggregateRoot.IdType }} Id { get; init; }

    {{~ for property in AggregateRoot.Properties ~}}
    {{~ if property.Name.Original != "Id" ~}}
    /// <summary>
    /// Gets or initializes {{ property.Name.Humanize }} of the {{ AggregateRoot.Name }}.
    /// </summary>
    public {{ if property.IsCollection }}IEnumerable<{{ if property.IsElementTypeComplex }}{{ property.ElementType }}QueryResult{{ else }}{{ property.ElementType }}{{ end }}>{{ else if property.IsComplex }}{{ property.Type }}QueryResult{{ else }}{{ property.Type }}{{ end }}{{ if !property.IsRequired }}?{{ end }} {{ property.Name.PascalCase }} { get; init; }{{ if property.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
    {{~ end ~}}
}

{{~ for property in AggregateRoot.Properties ~}}
{{~ if property.IsComplex ~}}
/// <summary>
/// Represents the {{ property.Type }} of a {{ AggregateRoot.Name }}.
/// </summary>
public class {{ property.Type }}QueryResult
{
    {{~ for nestedProperty in property.NestedMembers ~}}
    /// <summary>
    /// Gets or initializes {{ nestedProperty.Name.Humanize }} of the {{ property.Type }}.
    /// </summary>
    public {{ if nestedProperty.IsCollection }}IEnumerable<{{ if nestedProperty.IsElementTypeComplex }}{{ nestedProperty.ElementType }}QueryResult{{ else }}{{ nestedProperty.ElementType }}{{ end }}>{{ else if nestedProperty.IsComplex }}{{ nestedProperty.Type }}QueryResult{{ else }}{{ nestedProperty.Type }}{{ end }}{{ if !nestedProperty.IsRequired }}?{{ end }} {{ nestedProperty.Name.PascalCase }} { get; init; }{{ if nestedProperty.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ if property.IsCollection && property.IsElementTypeComplex ~}}
/// <summary>
/// Represents the {{ property.ElementType }} of a {{ AggregateRoot.Name }}.
/// </summary>
public class {{ property.ElementType }}QueryResult
{
    {{~ for nestedProperty in property.NestedMembers ~}}
    /// <summary>
    /// Gets or initializes {{ nestedProperty.Name.Humanize }} of the {{ property.ElementType }}.
    /// </summary>
    public {{ if nestedProperty.IsCollection }}IEnumerable<{{ if nestedProperty.IsElementTypeComplex }}{{ nestedProperty.ElementType }}QueryResult{{ else }}{{ nestedProperty.ElementType }}{{ end }}>{{ else if nestedProperty.IsComplex }}{{ nestedProperty.Type }}QueryResult{{ else }}{{ nestedProperty.Type }}{{ end }}{{ if !nestedProperty.IsRequired }}?{{ end }} {{ nestedProperty.Name.PascalCase }} { get; init; }{{ if nestedProperty.IsRequired }} = default!;{{ end }}

    {{~ end ~}}
}

{{~ end ~}}
{{~ end ~}}